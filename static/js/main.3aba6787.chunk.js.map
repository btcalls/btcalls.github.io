{"version":3,"sources":["components/NavBar/index.tsx","utils/constants.ts","containers/Home/index.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","className","icon","faFacebookF","link","faInstagram","faTwitter","faLinkedinIn","map","item","index","key","onClick","window","open","focus","onClickSNS","HomePage","Container","Boolean","location","hostname","match","WebFont","load","google","families","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAuDeA,G,MAnCA,WAoBb,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,UAMf,yBAAKA,UAAU,OAtBI,CACnB,CAAEC,KAAMC,IAAaC,KC3BL,oCD4BhB,CAAEF,KAAMG,IAAaD,KCzBL,2CD0BhB,CAAEF,KAAMI,IAAWF,KC5BE,+BD6BrB,CAAEF,KAAMK,IAAcH,KC5BA,0CD+BXI,KAAI,SAACC,EAAMC,GAAP,OACf,0BAAMC,IAAKD,EAAOE,QAAS,kBAbZ,SAACR,GAAkB,IAAD,EACnC,UAAAS,OAAOC,KAAKV,EAAM,iBAAlB,SAA6BW,QAYMC,CAAWP,EAAKL,QAC/C,kBAAC,IAAD,CAAiBF,KAAMO,EAAKP,eElBrBe,G,MAVE,WACf,OACE,oCACE,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,SCCcC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2D,MCRNC,IAAQC,KAAK,CACXC,OAAQ,CACNC,SAAU,CAAC,yBAA0B,iBAIzCC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SD2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3aba6787.chunk.js","sourcesContent":["import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faFacebookF,\n  faInstagram,\n  faLinkedinIn,\n  faTwitter,\n  IconDefinition,\n} from '@fortawesome/free-brands-svg-icons';\n\nimport { SNS_FB, SNS_TWITTER, SNS_IG, SNS_LINKEDIN } from 'utils/constants';\n\nimport './index.scss';\n\ntype SNS = {\n  icon: IconDefinition,\n  link: string,\n}\n\nconst NavBar = () => {\n  const onClickSNS = (link: string) => {\n    window.open(link, '_blank')?.focus();\n  }\n\n  const renderSNSLinks = () => {\n    const items: SNS[] = [\n      { icon: faFacebookF, link: SNS_FB },\n      { icon: faInstagram, link: SNS_IG },\n      { icon: faTwitter, link: SNS_TWITTER },\n      { icon: faLinkedinIn, link: SNS_LINKEDIN },\n    ]\n\n    return items.map((item, index) => (\n      <span key={index} onClick={() => onClickSNS(item.link)}>\n        <FontAwesomeIcon icon={item.icon} />\n      </span>\n    ));\n  }\n\n  return (\n    <div className=\"NavBar-container\">\n      <div className=\"menus\">\n        {/* <span className=\"enabled\">Home</span>\n        <span>Work</span>\n        <span>About</span> */}\n      </div>\n\n      <div className=\"sns\">\n        {renderSNSLinks()}\n      </div>\n    </div>\n  )\n}\n\nexport default NavBar;\n","export const SNS_FB = 'https://www.facebook.com/btCalls';\nexport const SNS_TWITTER = 'https://twitter.com/BTcalls';\nexport const SNS_LINKEDIN = 'www.linkedin.com/in/jason-jon-carreos';\nexport const SNS_IG = 'https://www.instagram.com/carreos.json/';\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nimport NavBar from 'components/NavBar/';\n\nimport './index.scss';\n\nconst HomePage = () => {\n  return (\n    <>\n      <NavBar />\n      <Container>\n      </Container>\n    </>\n  );\n}\n\nexport default HomePage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport WebFont from 'webfontloader';\n\nimport HomePage from './containers/Home';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nWebFont.load({\n  google: {\n    families: ['Montserrat:300,400,700', 'sans-serif']\n  }\n});\n\nReactDOM.render(<HomePage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}